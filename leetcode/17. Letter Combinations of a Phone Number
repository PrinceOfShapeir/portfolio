/**
https://leetcode.com/problems/letter-combinations-of-a-phone-number/submissions/921225754/
56ms runtime beats 81.54% of submissions

 * @param {string} digits
 * @return {string[]}
 */
var letterCombinations = function(digits) {
if(digits.length<=1) return letters.get(digits) || [];    
else if(digits.length===2){
    let output = [];
    for(let i of letters.get(digits[0])){

        for(let z of letters.get(digits[1])){

            output.push(i+z)

        }

    }
    return output;
}
else if (digits.length===3){
    let output = [];
    for(let i of letters.get(digits[0])){

        for(let z of letters.get(digits[1])){

            for(let y of letters.get(digits[2])){
                output.push(i+z+y);
            }

        }

    }
    return output;
}
else if (digits.length===4){

    let output = [];
    for(let i of letters.get(digits[0])){

        for(let z of letters.get(digits[1])){

            for(let y of letters.get(digits[2])){
               
               for(let x of letters.get(digits[3])){

                    output.push(i+z+y+x);
               }

            }

        }

    }
    return output;


    
}


};

const letters = new Map([
    ["2", ["a","b","c"]],
    ["3", ["d","e","f"]],
    ["4", ["g","h","i"]],
    ["5", ["j","k","l"]],
    ["6", ["m","n","o"]],
    ["7", ["p","q","r","s"]],
    ["8", ["t","u","v"]],
    ["9", ["w","x","y","z"]],
]);
