class CircularQueue {
   constructor(size) {

     this.queue = [];
     this.read = 0;
     this.write = 0;
     this.max = size - 1;

     while (size > 0) {
        this.queue.push(null);
        size--;
     }
   }

   print() {
     return this.queue;
   }

   enqueue(item) {
    // Only change code below this line
    if (this.queue[this.write+1]===null){
      this.write += 1;
      this.queue[this.write] = item;
    }
    else if(this.write>=this.max){//overflow
    if(this.queue[0]===null){
      this.write = 0;
      this.queue[0] = item;
      return item;
    }
    else return null;
    }
    
    else {
      return null;

    }
    // Only change code above this line
   }

   dequeue() {
    // Only change code below this line
    if(this.read+1>=this.max){
      if(this.queue[0]!=null){
        let temp = this.queue[0];
        this.queue[0] = null;
        this.read = 0;
        return temp;
      }
    }
    else if(this.queue[this.read+1]!=null){

      this.read += 1;
      let temp = this.queue[this.read];
      this.queue[this.read] = null;
      return temp;

    }
    else return null;
    // Only change code above this line
   }
}
