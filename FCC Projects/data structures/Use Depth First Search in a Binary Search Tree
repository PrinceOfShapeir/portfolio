var displayTree = tree => console.log(JSON.stringify(tree, null, 2));
function Node(value) {
  this.value = value;
  this.left = null;
  this.right = null;
}
function BinarySearchTree() {
  this.root = null;
  // change code below this line
  this.preorder = ()=>{

    if(this.root === null){
      return this.root;
    }

    let leftFirst = (node)=>{
    
    if(!node.value===null){
      return [];
    }
    let leftTree = [];
    let rightTree = [];
    if (node.left){
      leftTree = leftFirst(node.left);

    }
    if(node.right){
      rightTree = leftFirst(node.right);
    }
 
    return [node.value].concat(leftTree,rightTree);


    }
    return leftFirst(this.root);

    }


  this.inorder = ()=>{

    if(this.root === null){
      return this.root;
    }
  }


  this.postorder = ()=>{

    if(this.root === null){
      return this.root;
    }

    let leafFirst = (node)=>{

    if(!node.value===null){
      return [];
    }
        let leftTree = [];
    let rightTree = [];

    if (node.left){
      leftTree = leafFirst(node.left);

    }
    if(node.right){
      rightTree = leafFirst(node.right);
    }
 
    return leftTree.concat(rightTree, node.value);

    }

    return leafFirst(this.root);

  }

  // change code above this line
}

let a = new BinarySearchTree();
a.root = new Node(1);
a.root.right = new Node(2);
a.root.right.left = new Node (1);
a.root.right.left.left = new Node(0);
a.root.right.left.right = new Node(2);
a.root.right.right = new Node (3);
a.root.left = new Node(0);
a.root.left.left = new Node(-1);
a.root.left.right = new Node(1);
a.root.left.left.left = new Node(-2);
a.root.left.left.right = new Node(0);
console.log(a.preorder());
//displayTree(a);


