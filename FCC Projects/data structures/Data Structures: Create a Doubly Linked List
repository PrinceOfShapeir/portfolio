var Node = function(data, prev) {
  this.data = data;
  this.prev = prev;
  this.next = null;
};
var DoublyLinkedList = function() {
  this.head = null;
  this.tail = null;
  // change code below this line
  this.add = (element)=>{
    if(!this.head){
      this.head = new Node(element, null);
      this.tail = null;
    }
    else if(!this.tail){
      this.tail= new Node(element, this.head);
      this.head.next=this.tail;
    }
    else {
      this.tail.next = new Node(element, this.tail);
      this.tail = this.tail.next;

    }
  }

  this.remove = (element)=>{

    if(!this.head){//empty
      return null;
    }//size of one
    else if(this.head===this.tail){
      this.head = null;
      this.tail = null;
      return;
    }//list>1
    else {
      //would have written an alternating front/back checker to go from both ends at once, but since it looks for ALL occurrences, there is no time savings. It would work if it returned after a single match.
      let node = this.head;
      let done = false;
      //console.log(this.tail)
      //console.log(this.tail.prev.data);
      while(!done){

        if(node.data===element){
          if(node===this.head){
            this.head = this.head.next;
            this.head.prev = null;
            //console.log("removing the head");
          }
          else if(node===this.tail){
            this.tail.prev.next = null;//here is the error?
            this.tail = this.tail.prev;
            //console.log("removing the tail");
          }
          else{

            node.prev.next = node.next;
            node.next.prev = node.prev;
          }




        }
        if(node.next){
          node = node.next;
        }
        else done = true;

      }




    }



  }
  // change code above this line
};

